#include "point.h"
#include <iostream>
using namespace std;


template <class T>
class Node {
public:
    T val;
    Node* next;
    Node* prev;

    Node(const T& val, Node* next, Node* prev) {
        this->val = val;
        this->next = next;
        this->prev = prev;
    }
};


template <class T>
class Tour {
private:
    Node<T>* start;
    int size;

    // inserts a new node with the given value after
    // the given node.
    // Throws a string exception if node is a nullptr
    void insert_after(Node<T>* node, const T& val){
        
        if(node==nullptr)
          throw string("error the node is empty thus cant add");
    Node<T>*ptr=new Node<T>(val,node->next,node);
     if(node->next!=nullptr)
   ptr->prev->next=ptr;
       ptr->next->prev=ptr;
        }

    // inserts a new node with the given value before
    // the given node.
    // Throws a string exception if node is a nullptr
    void insert_before(Node<T>* node, const T& val){
        
        if(node==nullptr)
          throw string("error the node is empty thus cant add");
    Node<T>*ptr=new Node<T>(val,node,node->prev);
     if(node->prev!=nullptr)
      ptr->next->prev=ptr;
       ptr->prev->next=ptr;
        start=ptr;
    }
public:
    Tour() { start = nullptr; size = 0; }
    ~Tour() { clear(); }
   
    Node<T>* get_start() const { return start; }
    int get_size() const { return size; }

    // Adds a new node with the given value.
    // The newly added node becomes the last node in the tour.
    // (the node before start)
    void add_to_end(const T&val){
       
         if(start==nullptr){
            start=new Node<T>(val,nullptr,nullptr);
            start->prev=start;
            start->next=start;
         }
         else insert_after(start->prev,val);
 size++;
    }
    
    // Adds a new node with the given value.
    // The newly added node becomes the start of the tour.
    // The old start node becomes the 2nd node in the tour.
    void add_to_start(const T&val){
            if(start==nullptr){
            start=new Node<T>(val,nullptr,nullptr);
            start->prev=start;
            start->next=start;
         }
            else  insert_before(start,val);
size++;//start=start->prev
    }

    // Removes all the nodes in the tour between ptr1 and ptr2 (exclusive).
    // - If "start" is in the cut range, start points at ptr1.
    // - If ptr1 == ptr2, all nodes in the tour are removed except ptr1/ptr2
    //   and start points at the remaining node.
    // - Throws a string exception if ptr1 or ptr2 is a nullptr.
    // - Throws a string exception if ptr1 and ptr2 point to nodes 
    //   that are not in the same tour.
    void cut(Node<T>* ptr1, Node<T>* ptr2){ 
        Node<T>*ptrcheck=start; int l=0;
        for( int i=0;i<size;i++){
            if(ptr1==ptrcheck)l++;
            if(ptr2==ptrcheck)l++;
             ptrcheck=ptrcheck->next;
        }
        ptrcheck= nullptr;
        if(l<2){throw string("not in same tour");}
        if( (ptr1  ==nullptr)||(ptr2==nullptr)){throw string("error ptr1 or 2 is null");}
                Node<T>*ptr=ptr1->next;
                while(ptr!=ptr2){
                  ptr->prev->next=ptr->next;
                  ptr->next->prev=ptr->prev;
                  if(start==ptr)start=ptr1;
                  Node<T>*temp=ptr;
                  ptr=ptr->next;
                  delete temp;
                  size--;
                }
                ptr=nullptr;
                
        }

    // Removes all the nodes in the tour.
    // (This function must use function cut());
    void clear(){
        if(size==0)return;
        cut(start,start);
        delete start;
        start= nullptr;
        size=0;
    }

    // Check if the tour is symmetric. I.e. if visiting 
    // the nodes from start node to the last node (the right before the start node) 
    // produces the same sequence of "values" for visiting the nodes starting from 
    // the last one and back to the start node.
    // Consider an empty tour and a tour with one node as symmetric.
    // Example.
    // the following are symmetric tours (of Point2D objects): 
    //    (1, 2) --> (2, 5) --> (1, 2) 
    //    (1, 2) --> (2, 5) --> (5, 8) --> (2, 5) --> (1, 2)
    //    (1, 2) --> (2, 5) --> (5, 8) --> (5, 8) --> (2, 5) --> (1, 2)
    // the following are not symmetric tours:
    //    (1, 2) --> (2, 5)
    //    (1, 2) --> (2, 5) --> (5, 8) --> (2, 5)
    //    (1, 2) --> (2, 5) --> (5, 8) --> (4, 6) --> (2, 5) --> (1, 2)
bool is_symmetric_tour() const{
  if(this->get_size()==0||this->get_size()==1)return 1;
  Node<T>*ptrforward=start;
  Node<T>*ptrreverse=start->prev;
  for(int i=0; i<size-1;i++){
    if( ptrreverse->val!=ptrforward->val) return 0;
    ptrreverse=ptrreverse->prev;
    ptrforward=ptrforward->next;
  }
return 1;
}

    // Computes the length of a tour of Point2D objects.
    // The length of the tour is defined as:
    // length = dist(start_node, 2nd_node) + dist(2nd_node, 3rd_node) + ... +
    //          dist(last_node,  start_node)
    // Example.
    //    (0, 0) --> (1, 1) --> (2, 2) --> (3, 3)
    //    length = dist((0,0), (1,1)) + dist((1,1), (2,2)) +
    //             dist((2,2), (3,3)) + dist((3,3), (0,0))
    //           =  sqrt(2) + sqrt(2) + sqrt(2) + sqrt(18)
    //           =  8.48528137424
    // Return 0 if the tour is empty or contains 1 point.
    friend double tour_length(const Tour<Point2D>& tour);

    // Prints the values in the tour.
    // -- DO NOT IMPLEMENT THIS FUNCTION. YOU CAN USE IT IMMEDIATELY.
    // -- THIS FUNCTION IS GIVEN TO YOU BY THE ENVIRONMENT. 
    // -- IF YOU IMPLEMENT IT, YOU WILL GET COMPILATION ERRORS.
    template<class K> 
    friend ostream& operator<<(ostream& out, const Tour<K>& tour);
};


double tour_length(const Tour<Point2D>& tour) {
  double length=0;
  if(tour.size==1||tour.size==0)return 0 ;
  Node<Point2D>* ptr=tour.get_start();
  for( int i=0;i<tour.get_size();i++){
      length=length+ptr->val.distance_to(ptr->next->val);
      ptr=ptr->next;
  }
return length;
}



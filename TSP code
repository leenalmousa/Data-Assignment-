#include "point2d.h"
#include <iostream>
#include <fstream>
#include "cturtle/CImg.h"
#include "cturtle/CTurtle.hpp"

using namespace std;
using namespace cturtle;

template <class T>
class Node {
public:
    T val;
    Node* next;
    Node* prev;

    Node(const T& val, Node* next, Node* prev) {
        this->val = val;
        this->next = next;
        this->prev = prev;
    }
};


template <class T>
class Tour {
public:
    Tour() { start = nullptr; size = 0; }
    ~Tour() { clear(); }

    Node<T>* get_start() const { return start; }
    int get_size() const { return size; }

    void add_to_end(const T&);
    void add_to_start(const T&);

    void cut(Node<T>* ptr1, Node<T>* ptr2);
    void clear();

private:
    void insert_after(Node<T>* node, const T& val);
    void insert_before(Node<T>* node, const T& val);

    template<class K> friend ostream& operator<<(ostream& out, const Tour<K>& tour);
    friend double tour_length(const Tour<Point2D>& tour);

    friend void insert_closest(const Point2D& point, Tour<Point2D>& tour);
    friend void insert_smallest(const Point2D& point, Tour<Point2D>& tour);

private:
    int size;
    Node<T>* start;
};
template <typename T>
    void insert_after(Node<T>* node, const T& val){
        if(node==nullptr)  
            throw string("error the node is empty thus cant add");
    Node<T>*ptr=new Node<T>(val,node->next,node);
     if(node->next!=nullptr)
   ptr->prev->next=ptr;
       ptr->next->prev=ptr;
        }
        template <typename T>
    void Tour<T>::insert_before(Node<T>* node, const T& val){
    
        if(node==nullptr)
          throw string("error the node is empty thus cant add");
    Node<T>*ptr=new Node<T>(val,node,node->prev);
     if(node->prev!=nullptr)
      ptr->next->prev=ptr;
       ptr->prev->next=ptr;
        start=ptr;
    }
    template <typename T>
    void Tour<T>::add_to_end(const T&val){
       
         if(start==nullptr){
            start=new Node<T>(val,nullptr,nullptr);
            start->prev=start;
            start->next=start;
         }
         else insert_after(start->prev,val);
 size++;
    }
    template <typename T>

    void Tour<T>::add_to_start(const T&val){
            if(start==nullptr){
            start=new Node<T>(val,nullptr,nullptr);
            start->prev=start;
            start->next=start;
         }
            else  insert_before(start,val);
size++;//start=start->prev
    }    template <typename T>

    void Tour<T>::cut(Node<T>* ptr1, Node<T>* ptr2){ 
        Node<T>*ptrcheck=start; int l=0;
        for( int i=0;i<size;i++){
            if(ptr1==ptrcheck)l++;
            if(ptr2==ptrcheck)l++;
             ptrcheck=ptrcheck->next;
        }ptrcheck= nullptr;
        if(l<2){throw string("not in same tour");}
         if( (ptr1  ==nullptr)||(ptr2==nullptr)){throw string("error ptr1 or 2 is null");}
         //     NOT IN THE SAM E TOUR  STILL NOT SOLVED !!!!!!!!
         Node<T>*ptr=ptr1->next;
                while(ptr!=ptr2){
                ptr->prev->next=ptr->next;
                ptr->next->prev=ptr->prev;
                if(start==ptr)start=ptr1;
                Node<T>*temp=ptr;
                 ptr=ptr->next;
                delete temp;size--;
                }ptr=nullptr;
                
        }

    // Removes all the nodes in the tour.
    // (This function must use function cut());
        template <typename T>

    void Tour<T>::clear(){
         if(size==0)return;
        cut(start,start);
        delete start;
         start= nullptr;
          size=0;
    }
void  insert_closest(const Point2D& point, Tour<Point2D>& tour) {
 Node<Point2D>* ptr=tour.get_start();
 Node<Point2D>* min=tour.get_start();
 for( int i=0; i<tour.get_size();i++){
if(point.distance_to(ptr->val)<point.distance_to(min->val)){
     min=ptr;
}ptr=ptr->next;
 } try{insert_after(min,point); tour.size++;}
  catch(string){
    tour.add_to_start(point);
  }

}

void insert_smallest(const Point2D& point, Tour<Point2D>& tour) {
Node<Point2D>*ptr=tour.get_start();
 double l= tour_length(tour);

  Node<Point2D>*min=tour.get_start();
 for( int i=0; i<tour.get_size();i++){
     double mindistance=l+min->val.distance_to(point)+point.distance_to(min->next->val)-min->val.distance_to(min->next->val);
if(l+ptr->val.distance_to(point)+point.distance_to(ptr->next->val)-ptr->val.distance_to(ptr->next->val)<mindistance){
min=ptr;
  } ptr=ptr->next;

}
try{insert_after(min,point); tour.size++;}
  catch(string){
    tour.add_to_start(point);
}

}


double tour_length(const Tour<Point2D>& tour) {
double length=0;
if(tour.size==1||tour.size==0)return 0 ;
Node<Point2D>* ptr=tour.get_start();
for( int i=0;i<tour.get_size();i++){
length=length+ptr->val.distance_to(ptr->next->val);
ptr=ptr->next;
}

    return length;
}




void draw(const Tour<Point2D>&, int, int);

int main() {
    string type;
    while (true) {
        cout << "Choose strategy: c (closest point) s (smallest increase): " << endl;
        cin >> type;
        if (type == "c" || type == "s")
            break;
        else
            cout << "ERROR: INVALID INPUT!" << endl;
    }
    
    string filename;
    ifstream fin;
    do {
        cout << "Enter the name of the test file: ";
        cin >> filename;
        fin.open("files/" + filename);
        if (!fin)
            cout << "INVALID FILE NAME\n";
    } while (!fin);

    Tour<Point2D> tour;

    double width, height;
    fin >> width >> height;
    width += 20;
    height += 20;

    double x, y;
    cout << "Working ... " << endl;
    while (fin >> x >> y) {
        if (type == "c")
            insert_closest(Point2D(x, y), tour);
        else
            insert_smallest(Point2D(x, y), tour);
    }
    
    cout << endl;
    cout << "Tour: " << endl << tour 
         << "Length = " << tour_length(tour) << endl
         << "Size = " << tour.get_size() << " points" << endl;

    draw(tour, width, height);

    return 0;
}


void draw(const Tour<Point2D>& tour, int w, int h) {
    int size = tour.get_size();
    if (size == 0)
        return;

    Node<Point2D>* curr = tour.get_start();
    TurtleScreen scr;
    Turtle turtle(scr);

    // go to the first position
    turtle.penup();
    turtle.goTo(-scr.window_width()/2 + (curr->val.x / w) * (scr.window_width()), 
                -scr.window_height()/2 + (curr->val.y / h) * (scr.window_height()));
    turtle.pendown();
    turtle.speed(TS_FASTEST);

    if (size > 10000)
        scr.tracer(size / 10000, 0);

    // turtle.penup();
    for (int i = 0; i <= size; i++, curr = curr->next) {
        Point2D point = curr->val;
        int new_x = -scr.window_width()/2 + (point.x / w) * (scr.window_width());
        int new_y = -scr.window_height()/2 + (point.y / h) * (scr.window_height());
        
        turtle.goTo(new_x, new_y);
    }

    scr.mainloop();
}

